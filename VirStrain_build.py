import re
import os,sys
import argparse

__author__="Liao Herui"

usage="VirStrain - An RNA virus strain-level identification tool for short reads."

def main():
	parser=argparse.ArgumentParser(prog='VirStrain_build.py',description=usage)
	parser.add_argument('-i','--input_msa',dest='input_msa',type=str,required=True,help="Input MSA file generated by mafft --- Required")
	parser.add_argument('-d','--database_dir',dest='db_dir',type=str,help='Database Output dir (default: current workdir/VirStrain_DB)')
	parser.add_argument('-c','--dash_cutoff',dest='dash_cutoff',type=str,help='The cutoff of dash in each column of MSA (default: 0)')
	
	args=parser.parse_args()	
	in_msa=args.input_msa
	db_dir=args.db_dir
	dashc=args.dash_cutoff

	if not db_dir:
		db_dir='VirStrain_DB'
	if not dashc:
		dashc=0
	if not os.path.exists(db_dir):
		os.makedirs(db_dir)
	# Start to build the database
	snum,cnum=scan_msa(in_msa)
	# Run all program
	# Step1 - Choose sites
	os.system('perl bin/aln2cluster-overlap-kmer-withd.pl '+in_msa+' '+str(snum)+' '+str(dashc)+' 0 '+str(cnum)+' 0 > VirStrain_build.column')
	# Step2 - Extract kmer and generate snp matrix
	os.system('python bin/S1_extract_kmer.py -i '+in_msa+' -c VirStrain_build.column')
	# Step3 - Divide strains into clusters
	os.system('python bin/S2_remove_redundant_For_Me.py -i Strain_pos_snp_matrix_consider_all.txt')
	# Step4 - Hierarchical Clustering
	os.system('python bin/S2.5_Split_cls_hierarchical_with_perl.py -i '+in_msa+' -r Remove_redundant_matrix_MM_Call.clstr')
	os.system('mv After_split.png Before_split.png ID2Name.txt '+db_dir)
	os.system('mv Pos-snp-kmer-all.fa Pos-snp-kmer-all.txt Rebuild_cls.clstr Remove_redundant_matrix_MM_Call.clstr  Strain_pos_snp_matrix_not_redundant_MM_Call.txt Strain_pos_snp_matrix_consider_all.txt SubCls_kmer.txt Strain_cls_info.txt VirStrain_build.column '+db_dir)
	
	

def scan_msa(in_msa):
	fs1=open(in_msa,'r')
	dseq={}
	while True:
		line=fs1.readline().strip()
		if not line:break
		if re.search('>',line):
			name=line
			dseq[name]=''
		else:
			dseq[name]+=line
	cnum=0
	for d in dseq:
		cnum=len(dseq[d])
		break
	return len(dseq),cnum

if __name__=='__main__':
	sys.exit(main())
